<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Pace Reader Pro – Focused‑Skill Speed‑Reading Trainer</title>
  <style>
    /* -------- CSS VARIABLE THEME -------- */
    :root {
      --font-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
        Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
      --size-base: 16px;
      --scale: 1.25;
      --radius: 6px;
      --fast: 0.2s;

      /* LIGHT */
      --bg: #f7f7f7;
      --surface: #fff;
      --txt1: #2c3e50;
      --txt2: #7f8c8d;
      --bord: #e0e0e0;
      --accent: #3498db;
      --accent-dk: #2980b9;
      --focus-line: rgba(52, 152, 219, 0.4);
      --btn-sec: #ecf0f1;
      --btn-sec-hov: #e0e5e7;
      --track: #ecf0f1;
      --thumb: var(--accent);
    }

    body.dark-mode {
      --bg: #121212;
      --surface: #1e1e1e;
      --txt1: #e0e0e0;
      --txt2: #9e9e9e;
      --bord: #424242;
      --accent: #f0ae67;
      --accent-dk: #d48f4a;
      --focus-line: rgba(240, 174, 103, 0.5);
      --btn-sec: #333;
      --btn-sec-hov: #444;
      --track: #424242;
      --thumb: var(--accent);
    }

    /* ---------- RESET ---------- */
    *,
    *::before,
    *::after {
      box-sizing: border-box;
    }
    html {
      font-size: var(--size-base);
    }
    body {
      font-family: var(--font-sans);
      background: var(--bg);
      color: var(--txt1);
      margin: 0;
      display: flex;
      justify-content: center;
      padding: 1.5rem;
      transition: background var(--fast) ease, color var(--fast) ease;
    }

    /* ---------- APP CARD ---------- */
    #app {
      width: 100%;
      max-width: 52rem;
      background: var(--surface);
      border-radius: var(--radius);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      padding: 2rem;
      transition: background var(--fast) ease;
    }
    body.dark-mode #app {
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    }

    .hide-in-focus {
      /* used later */
    }

    h1 {
      font-size: calc(1rem * var(--scale) * var(--scale));
      margin: 0;
      text-align: center;
      font-weight: 600;
    }

    /* ---------- TEXT INPUT ---------- */
    #inputText {
      width: 100%;
      min-height: 10rem;
      resize: vertical;
      padding: 0.75rem 1rem;
      border: 1px solid var(--bord);
      border-radius: var(--radius);
      font-family: inherit;
      background: var(--bg);
      color: var(--txt1);
      transition: border var(--fast), background var(--fast);
    }
    #inputText:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 2px var(--accent-dk) inset;
    }

    /* ---------- DISPLAY AREA ---------- */
    #displayAreaWrapper {
      border: 1px solid var(--bord);
      border-radius: var(--radius);
      background: var(--bg);
      min-height: 8rem;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      padding: 0 1rem;
      transition: border var(--fast), background var(--fast);
    }
    #displayAreaWrapper::before {
      content: "";
      position: absolute;
      left: 50%;
      top: 25%;
      bottom: 25%;
      width: 1px;
      background: var(--focus-line);
      transform: translateX(-50%);
      opacity: 0.6;
      pointer-events: none;
    }
    #displayArea {
      width: 100%;
      text-align: center;
      font-size: 2rem;
      font-weight: 500;
      line-height: 1.3;
      word-break: break-word;
    }
    .highlight {
      color: var(--accent);
    }

    /* ---------- CONTROLS ---------- */
    #controls {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(12rem, 1fr));
      gap: 1rem;
      align-items: end;
    }
    .control-group {
      display: flex;
      flex-direction: column;
      gap: 0.35rem;
    }
    label {
      font-size: 0.9rem;
      color: var(--txt2);
      font-weight: 500;
      display: flex;
      justify-content: space-between;
    }
    .value-display {
      color: var(--accent);
      font-weight: 600;
    }
    input[type="range"] {
      width: 100%;
      appearance: none;
      height: 0.5rem;
      border-radius: 999px;
      background: var(--track);
    }
    input[type="range"]::-webkit-slider-thumb {
      appearance: none;
      width: 1.1rem;
      height: 1.1rem;
      border-radius: 50%;
      background: var(--thumb);
      cursor: pointer;
    }
    input[type="range"]::-moz-range-thumb {
      width: 1.1rem;
      height: 1.1rem;
      border-radius: 50%;
      border: none;
      background: var(--thumb);
      cursor: pointer;
    }
    select,
    button {
      font-family: inherit;
      font-size: 0.93rem;
      padding: 0.65rem 0.9rem;
      border-radius: var(--radius);
      border: 1px solid var(--bord);
      background: var(--btn-sec);
      color: var(--txt1);
      cursor: pointer;
      transition: background var(--fast), transform var(--fast), box-shadow var(--fast);
    }
    button:hover,
    select:hover {
      background: var(--btn-sec-hov);
      transform: translateY(-1px);
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);
    }
    button:active {
      transform: translateY(0);
      box-shadow: none;
    }
    button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    #startPauseBtn {
      background: var(--accent);
      color: #fff;
      border: none;
    }
    #startPauseBtn:hover {
      background: var(--accent-dk);
    }
    body.dark-mode #startPauseBtn {
      color: #111;
    }

    .button-group {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 0.8rem;
      margin-top: 1rem;
    }
    .mode-toggle-group {
      display: flex;
      justify-content: center;
      gap: 0.8rem;
      margin-top: 0.5rem;
      border-top: 1px solid var(--bord);
      padding-top: 1rem;
    }

    /* ---------- STATS ---------- */
    #stats {
      font-size: 0.85rem;
      color: var(--txt2);
      text-align: center;
      height: 1.2em;
    }

    /* ---------- FOCUS MODE ---------- */
    body.focus-mode #app {
      background: none;
      box-shadow: none;
      padding: 0;
      max-width: none;
    }
    body.focus-mode .hide-in-focus {
      display: none !important;
    }
    body.focus-mode #displayAreaWrapper {
      border: none;
      border-radius: 0;
      min-height: 100vh;
    }

    #exitFocusHint {
      position: fixed;
      bottom: 1rem;
      left: 50%;
      transform: translateX(-50%);
      font-size: 0.8rem;
      background: var(--surface);
      padding: 0.4rem 0.8rem;
      border-radius: var(--radius);
      border: 1px solid var(--bord);
      opacity: 0;
      pointer-events: none;
      transition: opacity var(--fast);
    }
    body.focus-mode #exitFocusHint {
      opacity: 1;
      pointer-events: auto;
    }

    /* ---------- RESPONSIVE ---------- */
    @media (max-width: 640px) {
      #controls {
        grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
      }
      .button-group {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div id="app">
    <header class="hide-in-focus">
      <h1>Pace Reader Pro</h1>
      <textarea
        id="inputText"
        placeholder="Paste or type your text here…"
        rows="8"
      ></textarea>
    </header>

    <main>
      <div id="displayAreaWrapper">
        <div id="displayArea">Welcome 👋</div>
      </div>
      <div id="stats" class="hide-in-focus">&nbsp;</div>
    </main>

    <footer class="hide-in-focus">
      <div id="controls">
        <div class="control-group">
          <label for="modeSelect"><span>Practice Mode</span></label>
          <select id="modeSelect">
            <option value="pace" selected>Paced Reading</option>
            <option value="ramp">WPM Ramp</option>
            <option value="sprint">Sprint Bursts</option>
            <option value="eye">Eye‑Span Highlight</option>
          </select>
        </div>
        <div class="control-group">
          <label for="wpmSlider">
            <span>Speed (WPM)</span>
            <span class="value-display"><span id="wpmValue">300</span></span>
          </label>
          <input type="range" id="wpmSlider" min="60" max="1500" step="10" value="300" />
        </div>
        <div class="control-group">
          <label for="chunkSizeSlider">
            <span>Words / Chunk</span>
            <span class="value-display"><span id="chunkSizeValue">3</span></span>
          </label>
          <input type="range" id="chunkSizeSlider" min="1" max="12" step="1" value="3" />
        </div>
        <div class="control-group">
          <label for="fontSizeSlider">
            <span>Font Size</span>
            <span class="value-display"><span id="fontSizeValue">2.0</span> rem</span>
          </label>
          <input type="range" id="fontSizeSlider" min="1" max="5" step="0.1" value="2" />
        </div>
        <div class="control-group">
          <label for="fontFamilySelect"><span>Font Family</span></label>
          <select id="fontFamilySelect">
            <option value="'Helvetica Neue',Helvetica,sans-serif" selected>Helvetica</option>
            <option value="Georgia,serif">Georgia</option>
            <option value="'Times New Roman',serif">Times New Roman</option>
            <option value="'Roboto',sans-serif">Roboto</option>
            <option value="'Courier New',monospace">Courier New</option>
          </select>
        </div>
      </div>

      <div class="button-group">
        <button id="startPauseBtn" title="Start Reading"><span class="icon">▶️</span></button>
        <button id="resetBtn">Reset</button>
      </div>

      <div class="mode-toggle-group">
        <button id="darkModeToggle" title="Toggle Dark Mode">🌙</button>
        <button id="focusModeToggle" title="Toggle Focus Mode">👁️</button>
      </div>
    </footer>
  </div>
  <div id="exitFocusHint">Press ESC or tap outside to exit focus</div>

  <script>
    // ---------- ELEMENT HOOKS ----------
    const el = (id) => document.getElementById(id);
    const inputText = el("inputText");
    const displayArea = el("displayArea");
    const wpmSlider = el("wpmSlider");
    const chunkSizeSlider = el("chunkSizeSlider");
    const fontSizeSlider = el("fontSizeSlider");
    const fontFamilySelect = el("fontFamilySelect");
    const modeSelect = el("modeSelect");
    const startPauseBtn = el("startPauseBtn");
    const resetBtn = el("resetBtn");
    const stats = el("stats");
    const darkToggle = el("darkModeToggle");
    const focusToggle = el("focusModeToggle");
    const body = document.body;

    // ---------- STATE ----------
    const S = {
      words: [],
      chunks: [],
      idx: 0,
      wpm: 300,
      chunkSize: 3,
      mode: "pace",
      timer: null,
      running: false,
      startTime: 0,
      totalRead: 0,
      fontSize: 2,
      fontFamily: fontFamilySelect.value,
      dark: false,
      focus: false,
    };

    // ---------- INIT ----------
    function init() {
      // restore dark‑pref
      S.dark = localStorage.getItem("paceDark") === "true";
      body.classList.toggle("dark-mode", S.dark);
      updateDarkIcon();

      // listeners
      wpmSlider.oninput = () => {
        S.wpm = +wpmSlider.value;
        el("wpmValue").textContent = S.wpm;
      };
      chunkSizeSlider.oninput = () => {
        S.chunkSize = +chunkSizeSlider.value;
        el("chunkSizeValue").textContent = S.chunkSize;
        rebuildChunks();
      };
      fontSizeSlider.oninput = () => {
        S.fontSize = +fontSizeSlider.value;
        el("fontSizeValue").textContent = S.fontSize.toFixed(1);
        displayArea.style.fontSize = S.fontSize + "rem";
      };
      fontFamilySelect.onchange = () => {
        S.fontFamily = fontFamilySelect.value;
        displayArea.style.fontFamily = S.fontFamily;
      };
      modeSelect.onchange = () => {
        S.mode = modeSelect.value;
      };

      inputText.oninput = resetAll;
      startPauseBtn.onclick = toggleRun;
      resetBtn.onclick = resetAll;
      darkToggle.onclick = () => {
        S.dark = !S.dark;
        body.classList.toggle("dark-mode", S.dark);
        localStorage.setItem("paceDark", S.dark);
        updateDarkIcon();
      };
      focusToggle.onclick = toggleFocus;
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && S.focus) toggleFocus();
      });

      // init UI values
      el("wpmValue").textContent = S.wpm;
      el("chunkSizeValue").textContent = S.chunkSize;
      el("fontSizeValue").textContent = S.fontSize.toFixed(1);
      displayArea.style.fontSize = S.fontSize + "rem";
      displayArea.style.fontFamily = S.fontFamily;
    }

    // ---------- CORE LOGIC ----------
    function rebuildChunks() {
      const txt = inputText.value.trim();
      S.words = txt.split(/\s+/).filter((w) => w);
      S.chunks = [];
      for (let i = 0; i < S.words.length; i += S.chunkSize) {
        S.chunks.push(S.words.slice(i, i + S.chunkSize).join(" "));
      }
      S.idx = 0;
      S.totalRead = 0;
      updateStats();
    }

    function formatChunk(chunk) {
      if (S.mode === "eye") {
        const arr = chunk.split(" ");
        const mid = Math.floor(arr.length / 2);
        arr[mid] = `<span class="highlight">${arr[mid]}</span>`;
        return arr.join(" ");
      }
      return chunk;
    }

    function nextChunk() {
      if (S.idx >= S.chunks.length) return stop(true);

      const chunk = S.chunks[S.idx];
      displayArea.innerHTML = formatChunk(chunk);
      const words = chunk.split(/\s+/).length;
      S.totalRead += words;
      S.idx++;
      updateStats();

      // mode‑specific behaviour
      rampIfNeeded();
      sprintIfNeeded();

      const delay = Math.max((words / S.wpm) * 60000, 40);
      S.timer = setTimeout(nextChunk, delay);
    }

    /* WPM Ramp – adds 10 WPM every 10 chunks */
    function rampIfNeeded() {
      if (S.mode !== "ramp") return;
      if (S.idx % 10 === 0) {
        S.wpm += 10;
        wpmSlider.value = S.wpm;
        el("wpmValue").textContent = S.wpm;
      }
    }

    /* Sprint – alternate high/low speed every 5 chunks */
    function sprintIfNeeded() {
      if (S.mode !== "sprint") return;
      if (S.idx % 5 === 0) {
        const high = +wpmSlider.value * 1.6;
        const low = +wpmSlider.value;
        S.wpm = S.wpm === high ? low : high;
      }
    }

    function start() {
      if (!S.chunks.length) rebuildChunks();
      if (!S.chunks.length) {
        displayArea.textContent = "…Enter text…";
        return;
      }
      S.running = true;
      startPauseBtn.innerHTML = "⏸️";
      S.startTime = Date.now();
      nextChunk();
    }

    function pause() {
      clearTimeout(S.timer);
      S.running = false;
      startPauseBtn.innerHTML = "▶️";
    }

    function stop(finished) {
      clearTimeout(S.timer);
      S.running = false;
      startPauseBtn.innerHTML = "▶️";
      if (finished) {
        displayArea.textContent = "— Finished —";
      }
    }

    function toggleRun() {
      S.running ? pause() : start();
    }

    function resetAll() {
      pause();
      S.idx = 0;
      S.totalRead = 0;
      displayArea.innerHTML = "…Ready…";
      rebuildChunks();
    }

    // ---------- UTIL ----------
    function updateStats() {
      if (!S.chunks.length) {
        stats.innerHTML = "&nbsp;";
        return;
      }
      const timeSec = ((Date.now() - S.startTime) / 1000) || 0;
      const wpmNow = timeSec ? Math.round((S.totalRead / timeSec) * 60) : S.wpm;
      stats.textContent = `Chunk ${S.idx}/${S.chunks.length} · ${S.totalRead} w · ${wpmNow} wpm`;
    }

    function updateDarkIcon() {
      darkToggle.textContent = S.dark ? "☀️" : "🌙";
    }

    function toggleFocus() {
      S.focus = !S.focus;
      body.classList.toggle("focus-mode", S.focus);
      focusToggle.textContent = S.focus ? "👁️‍🗨️" : "👁️";
    }

    init();
  </script>
</body>
</html>
